cmake_minimum_required(VERSION 3.15.2)

# 设置工程名称和语言
project(LIBLCG)

if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux")
	message(STATUS "Platform: " ${CMAKE_HOST_SYSTEM_NAME})
	set(CMAKE_INSTALL_PREFIX "/usr/local")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin")
	message(STATUS "Platform: " ${CMAKE_HOST_SYSTEM_NAME})
	set(CMAKE_INSTALL_PREFIX "/usr/local")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
	message(STATUS "Platform: " ${CMAKE_HOST_SYSTEM_NAME})
	set(CMAKE_C_COMPILER gcc)
	set(CMAKE_CXX_COMPILER g++)
	set(CMAKE_INSTALL_PREFIX "D:/Library")
else()
	message(STATUS "Platform: " ${CMAKE_HOST_SYSTEM_NAME})
	set(CMAKE_INSTALL_PREFIX "/usr/local")
endif()
message(STATUS "Install prefix: " ${CMAKE_INSTALL_PREFIX})

# 添加源文件地址
add_subdirectory(src/)

# 设置库版本号
set(VERSION_MAJOR 1)
set(VERSION_MINOR 6)
set(VERSION_PATCH 0)

# 构建一个 CPack 安装包
include (InstallRequiredSystemLibraries)
	set(CPACK_OUTPUT_FILE_PREFIX "${PROJECT_SOURCE_DIR}/pack")
	set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
	set(CPACK_PACKAGE_VERSION_MAJOR "${VERSION_MAJOR}")
	set(CPACK_PACKAGE_VERSION_MINOR "${VERSION_MINOR}")
	set(CPACK_PACKAGE_VERSION_PATCH "${VERSION_PATCH}")
	set(PROJECT_VERSION_FULL ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
	set(CPACK_SOURCE_GENERATOR "TGZ")
	set(CPACK_SOURCE_PACKAGE_FILE_NAME liblcg-${PROJECT_VERSION_FULL})
include (CPack)